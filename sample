import boto3
import pbcore.logger as logger
from datetime import datetime
import service.PropertyUtil as propertyutil
from boto3.dynamodb.conditions import Key
from botocore.exceptions import ClientError
import os
from pbcore.aws.parameterstore import get_lambda_ssm_param_value
import service.PropertyUtil as property_util
import json
from boto3.dynamodb.types import TypeDeserializer
from boto3.dynamodb.types import TypeSerializer

LAMBDA_FUNCTION = os.environ.get("AWS_LAMBDA_FUNCTION_NAME")


table_name = propertyutil.getValue("ENVIRONMENT") + "_push_notification_token"


dynamodb = boto3.client('dynamodb')

import boto3
import pbcore.logger as logger
from datetime import datetime
import service.PropertyUtil as propertyutil
from boto3.dynamodb.conditions import Key
from botocore.exceptions import ClientError
import os
from pbcore.aws.parameterstore import get_lambda_ssm_param_value
import service.PropertyUtil as property_util
import json
from boto3.dynamodb.types import TypeDeserializer
from boto3.dynamodb.types import TypeSerializer

LAMBDA_FUNCTION = os.environ.get("AWS_LAMBDA_FUNCTION_NAME")


table_name = propertyutil.getValue("ENVIRONMENT") + "_push_notification_token"


dynamodb = boto3.client('dynamodb')

"""
Fetches device details from DynamoDB based on the provided device ID.

Args:
- deviceId: The ID of the device to fetch details for.

Returns:
- dict: A dictionary containing the device details fetched from DynamoDB.
"""
def fetch_by_deviceId(deviceId):
    try:
        response = dynamodb.get_item(
            TableName=table_name,
            Key={"device_id": {"S": deviceId}}
        )
        item = response["Item"]
        print("Device Details")
        return dynamo_to_python(item)
    except ClientError as err:
        logger.error(f"fetch record error {err}")

"""
Deletes a database record based on the provided device ID.

Args:
- deviceId: The ID of the device whose record needs to be deleted.

Returns:
- dict: The response from the deletion operation.
"""
def delete_by_deviceId(deviceId):
    try:
        return dynamodb.delete_item(TableName=table_name, Key={"device_id": {"S": deviceId}})
        
    except ClientError as err:
        logger.error(f"delete record error {err}")

"""
Creates a new record in DynamoDB based on the provided record details.

Args:
- record: A dictionary containing the details of the record to be inserted.

Returns:
- dict: The response from the DynamoDB `put_item` operation.
"""
def insert_device_details(record):
    logger.info("Create the Record in DynamoDB")
    now = datetime.now()
    date_time = now.strftime("%y-%m-%d, %H:%M:%S")
    try:
        item = {key: {'S': str(value)} for key, value in record.items()} | {
            "created_at": {'S': date_time},
            "modified_at": {'S': date_time},
        }
        response = dynamodb.put_item(TableName=table_name, Item=item)
        print(f'Insert response: {response}')

    except Exception as e:
        logger.error(f'An unexpected error occurred :: create_or_update_record : {e}')

"""
Updates device details in DynamoDB based on the provided device details.

Args:
- device_details: A JSON string containing the device details to be updated.

Returns:
- dict: The response from the update operation in DynamoDB.
"""
def update_device_details(device_details):
    now = datetime.now()
    date_time = now.strftime("%y-%m-%d, %H:%M:%S")
    logger.info(f"Starting update process at {date_time}")

    record = python_to_dynamo(json.loads(device_details))
    attribute_updates = {key: {'Value': value} for key, value in record.items() if key != 'deviceId'}
    attribute_updates['modfied_at'] = {'Value': {'S': date_time}}

    try:
        response = dynamodb.update_item(
            TableName=table_name,
            Key={"device_id": record["deviceId"]},
            AttributeUpdates=attribute_updates
        )
        print(f'Record Updated:{response}')
    except ClientError as err:
        logger.error(f"Unable to update device details for deviceId: {record['deviceId']} - {err}")
        raise
    logger.info("Updated device details successfully")
    return response
 
"""
Converts a DynamoDB object to a Python dictionary.

Args:
- dynamo_object: A DynamoDB object to be converted to a Python dictionary.

Returns:
- dict: The Python dictionary after deserialization.
"""
def dynamo_to_python(dynamo_object: dict) -> dict:
    deserializer = TypeDeserializer()
    return {
        k: deserializer.deserialize(v)
        for k, v in dynamo_object.items()
    }

"""
Converts a Python dictionary to a DynamoDB object.

Args:
- python_object: A Python dictionary to be converted to a DynamoDB object.

Returns:
- dict: The DynamoDB object after serialization.
"""
def python_to_dynamo(python_object: dict) -> dict:
    serializer = TypeSerializer()
    return {
        k: serializer.serialize(v)
        for k, v in python_object.items()
    }
